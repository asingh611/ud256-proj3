Problem 5
In this problem, a trie is used to implement an autocomplete function such that all of the suffixes for a given prefix are returned. A Trie and TrieNode class are given to be implemented. The autocomplete elements reside in TrieNodes within a Trie object. A TrieNode contains a value and children, which are stored in a dictionary such that each entry is [next character, <TrieNode for next character>]. The TrieNode has an insert function, which will insert a provided character into the children dictionary if it doesn't already exist. Since children are stored in a dicionary, insert is O(1). The TrieNode class also contains a suffixes function which recursively gathers all of the suffixes from children nodes. Within each recursion, we need to iterate over each child in the children dictionary, so that is O(n). The Trie class contains an insert function, which calls the insert function of the node for each character being inserted. Although inserting a single character is O(1), since we loop through each character, this is O(n). The find function also loops through each character in the prefix being searched for, so that is also O(n). In terms of space complexity, the amount of space being used will depend on the number of nodes created within the Trie